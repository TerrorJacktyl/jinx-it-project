# Sets the version syntax that we're using. Just a backwards compatability feature
version: "3"
services:
  db:
    container_name: jinx_db
    # freeze the database version in case there are breaking changes in an update
    image: postgres:12.4-alpine
    environment:
      # Denotes DB name to be created on image startup
      - POSTGRES_DB=jinx_db
      # Create a user when the database is initialized.
      # Not sure if root exists by default.
      - POSTGRES_USER=jinx
      - POSTGRES_PASSWORD=jinx
      # volumes:
      # - ./postgres:/var/lib/postgresql/data
    # Unless stopped manually, restart automatically
    restart: unless-stopped
  django:
    container_name: jinx_django
    # Denotes where to find the instructions for how to build our container, i.e. the Dockerfile
    build:
      context: .
      dockerfile: src/backend/Dockerfile.backend
    command: >
      bash -c "python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
    # Sets environment varaibles from a file
    env_file:
      - src/backend/django_dev.env
    environment:
      - DJANGO_DB_PASSWORD=jinx
    # Maps a volume from our local location to /backend in our container.
    # Allows us to have real-time access to the code in our Dockerfile.
    # Whenever we make a change in our source code, it'll automatically be mapped
    # to our docker container without having to rebuild it
    volumes:
      - ./src/backend:/backend
    # Do not use port 8000 in production - warning by https://docs.docker.com/compose/django/
    ports:
      - "8080:8000"
      - "3001:3001"
    depends_on:
      - db
    # Unless stopped manually, restart automatically
    restart: unless-stopped
  react:
    container_name: jinx_react
    # Not too sure what this does, but the React container will exit without it!
    stdin_open: true
    build:
      context: .
      dockerfile: src/frontend/Dockerfile.frontend
    volumes:
      - /frontend/node_modules
      - ./src/frontend:/frontend
    ports:
      - "3000:3000"
